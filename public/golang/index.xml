<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golangs on Dhriti Shikhar</title>
    <link>https://dhritishikhar.github.io/golang/</link>
    <description>Recent content in Golangs on Dhriti Shikhar</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 27 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dhritishikhar.github.io/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Empty slices</title>
      <link>https://dhritishikhar.github.io/golang/post-1/2/</link>
      <pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://dhritishikhar.github.io/golang/post-1/2/</guid>
      <description>Table of contents Introduction Introduction // An example of empty slices package main import &amp;#34;fmt&amp;#34; func main() { var a []int fmt.Printf(&amp;#34;\nA: %s&amp;#34;, a) b := []int{} fmt.Printf(&amp;#34;\nB: %s&amp;#34;, b) c := make([]int, 0) fmt.Printf(&amp;#34;\nC: %s&amp;#34;, c) d := make([]int, 0, 1) fmt.Printf(&amp;#34;\nD: %s\n&amp;#34;, d) } a is initialized with zero value for slices&#xA;b is slice literal with zero elements&#xA;c is created using make() function with size 0</description>
    </item>
    <item>
      <title>Limit concurrency</title>
      <link>https://dhritishikhar.github.io/golang/post-1/1/</link>
      <pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://dhritishikhar.github.io/golang/post-1/1/</guid>
      <description>Table of contents Problem Solution Problem How to limit number of goroutines from inside an infinite loop?&#xA;package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) func main() { var wg sync.WaitGroup totalGoRoutines := 5 fmt.Println(&amp;#34;Start\n&amp;#34;) for i := 0; i &amp;lt; totalGoRoutines; i++ { wg.Add(1) go counter(i, &amp;amp;wg) } wg.Wait() fmt.Println(&amp;#34;\n\nDone!&amp;#34;) } // Counter prints count number func counter(count int, wg *sync.WaitGroup) { defer wg.Done() fmt.Printf(&amp;#34;Count: %d\n&amp;#34;, count) } Output:&#xA;In above scenario, all goroutines were started simultaneously.</description>
    </item>
  </channel>
</rss>
